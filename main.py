import json, os

if os.path.exists("tasks.json"):
    with open("tasks.json", "r") as read_task:
        try:
            data = json.load(read_task)
            task = data.get("active", [])
            task_completed = data.get("completed", [])
        except json.JSONDecodeError:
            task = []
            task_completed = []
else:
    with open("tasks.json", "w") as write_task:
        json.dump({"active": [], "completed": []}, write_task)
    task = []
    task_completed = []


def back_menu():
    while True:
        return_menu = input("–•–æ—Ç–∏—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é? –î–∞ [y] üòä, –ù–µ—Ç [n] üëã: ")
        if return_menu.lower() == "y":
            menu()
            break
        elif return_menu.lower() == "n":
            print("–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã! –î–æ —Å–≤–∏–¥–∞–Ω–∏—è! üëã")
            break
        else:
            print("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞. ü§î")
            continue


def menu():
    while True:
        try:
            choice = int(input(
                "\n–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! üëã\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:\n"
                "1. –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–µ–∫—É—â–∏—Ö –∑–∞–¥–∞—á üìã\n"
                "2. –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É ‚ûï\n"
                "3. –û—Ç–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞—á—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é ‚úÖ\n"
                "4. –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á üéâ\n"
                "5. –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É üóëÔ∏è\n"
                "6. –í—ã–π—Ç–∏ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã üö™\n"
                "–í–∞—à –≤—ã–±–æ—Ä: "))
        except ValueError:
            print("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–æ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –æ—Ç 1 –¥–æ 6. ‚ùå")
            continue

        if choice == 1:
            read_task()
            break
        elif choice == 2:
            append_task()
            break
        elif choice == 3:
            mark_completed()
            break
        elif choice == 4:
            show_completed()
            break
        elif choice == 5:
            delete_task()
            break
        elif choice == 6:
            print("–í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã. –î–æ –Ω–æ–≤—ã—Ö –≤—Å—Ç—Ä–µ—á! üëã")
            break
        else:
            print("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 6. ü§®")


def avto_save():
    with open("tasks.json", "w") as f:
        json.dump({"active": task, "completed": task_completed}, f)


def append_task():
    add_task = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É ‚úçÔ∏è: ")
    if add_task.strip():
        task.append(add_task.strip())
        avto_save()
        print("–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞! üéâ")
    else:
        print("–ü—É—Å—Ç–∞—è –∑–∞–¥–∞—á–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∞. üö´")
    back_menu()


def read_task():
    if not task:
        print("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á. –î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—É—é! üòä")
    else:
        print("\n–°–ø–∏—Å–æ–∫ —Ç–µ–∫—É—â–∏—Ö –∑–∞–¥–∞—á üìã:")
        for index, value in enumerate(task):
            print(f"{index + 1}. {value}")
    back_menu()


def delete_task():
    if not task:
        print("–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø—É—Å—Ç. –ù–µ—Ç –∑–∞–¥–∞—á –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è. üòï")
        back_menu()
        return

    print("\n–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á üìù:")
    for index, value in enumerate(task):
        print(f"{index + 1}. {value}")

    while True:
        try:
            delete = int(input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å üóëÔ∏è: "))
            if delete < 1 or delete > len(task):
                print(f"–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ {len(task)}. ‚ö†Ô∏è")
            else:
                deleted_task = task.pop(delete - 1)
                avto_save()
                print(f"–ó–∞–¥–∞—á–∞ '{deleted_task}' –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞. üóëÔ∏è")
                break
        except ValueError:
            print("–û—à–∏–±–∫–∞: –≤–≤–æ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã. üö´")
    back_menu()


def mark_completed():
    if not task:
        print("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏. üòå")
        back_menu()
        return

    print("\n–°–ø–∏—Å–æ–∫ —Ç–µ–∫—É—â–∏—Ö –∑–∞–¥–∞—á üìã:")
    for index, value in enumerate(task):
        print(f"{index + 1}. {value}")

    while True:
        try:
            complet = int(input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä—É—é –≤—ã –≤—ã–ø–æ–ª–Ω–∏–ª–∏ ‚úÖ: "))
            if complet < 1 or complet > len(task):
                print(f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ {len(task)}. ‚ö†Ô∏è")
            else:
                completed_task = task.pop(complet - 1)
                task_completed.append(completed_task)
                avto_save()
                print(f"–ó–∞–¥–∞—á–∞ '{completed_task}' —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è! üéâ")
                break
        except ValueError:
            print("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–æ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã. üö´")
    back_menu()


def show_completed():
    if not task_completed:
        print("–ü–æ–∫–∞ –Ω–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á. –í–ø–µ—Ä–µ–¥ –∫ –¥–µ–ª–∞–º! üöÄ")
    else:
        print("\n–°–ø–∏—Å–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á üéä:")
        for index, value in enumerate(task_completed):
            print(f"{index + 1}. {value}")
    back_menu()
menu()